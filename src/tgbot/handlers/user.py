from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from chatgpt_md_converter import telegram_format

from src.db.crud import add_user, clear_chat_history
from src.schemas.schemas import TelegramUser
from src.db.database import get_db
from src.tgbot.misc.utils import send_admin_message

user_router = Router()

@user_router.message(CommandStart())
async def user_start(message: Message):
    """Handle the /start command"""
    await message.answer(
        telegram_format(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø - LazyHangeul, –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–æ—Ä–µ–π—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –Ω–∞ –±–∞–∑–µ OpenAI. "
            "–ü–æ–º–æ–≥—É –≤ –ø–æ–∏—Å–∫–µ –Ω—É–∂–Ω–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏–ª–∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π /help\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —á–∞—Ç–±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∞–≤—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞. \n\n–¢–ì: @ksairosdormu"
        )
    )

    user_info = f"@{message.from_user.username or 'N/A'} (ID: {message.from_user.id})"
    await send_admin_message(
        message.bot, f"{user_info} —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–æ—Ç–∞", "üôã –°—Ç–∞—Ä—Ç–æ–≤–∞–ª –ë–æ—Ç–∞"
    )

    # IMPORTANT Uncomment to turn on user adding with /start

    # user = TelegramUser(
    #     user_id=message.from_user.id,
    #     username=message.from_user.username,
    #     first_name=message.from_user.first_name,
    #     last_name=message.from_user.last_name,
    #     chat_id=message.chat.id
    # )
    #
    # async for session in get_db():
    #     await add_user(session=session, user=user)


@user_router.message(Command("givemebotaccess"))
async def give_bot_access(message: Message):
    """Handle the /givemebotaccess command - secret command to register user"""
    user = TelegramUser(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        chat_id=message.chat.id
    )
    
    try:
        async for session in get_db():
            await add_user(session=session, user=user)
            user_info = f"@{message.from_user.username or 'N/A'} (ID: {message.from_user.id})"
            await send_admin_message(message.bot, f"{user_info} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", "üôãüÜï New User")
        await message.answer("–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞.")
        import logging
        logging.error(f"Error adding user {user.user_id}: {e}")


@user_router.message(Command("clear_history"))
async def clear_user_history(message: Message, state: FSMContext):
    """Handle the /clear_history command"""
    user = TelegramUser(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        chat_id=message.chat.id
    )
    
    try:
        async for session in get_db():
            await clear_chat_history(session, user)
            
        # Clear any active FSM state as well
        await state.clear()
        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
            
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        # Log the error
        import logging
        logging.error(f"Error clearing chat history for user {user.user_id}: {e}")