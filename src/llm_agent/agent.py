import logfire

from dotenv import load_dotenv
from qdrant_client.http.models import SparseVector, Prefetch

from src.config import prompts
from src.config.settings import Config

from pydantic_ai import Agent, RunContext
from pydantic_ai.usage import UsageLimits


from src.llm_agent.agent_tools import retrieve_docs_tool
from src.schemas.schemas import RouterAgentDeps, TranslationAgentResult, RouterAgentResult

load_dotenv()

config = Config()

logfire.configure(token=config.logfire_api_key)

router_agent = Agent(
    model="openai:gpt-4o-mini",
    instrument=True,
    result_type=RouterAgentResult,
    system_prompt=(
        """
        Вы — мощный ИИ агент в чат-боте для изучения корейского языка. Ваша задача — определить намерение пользователя, 
        отнести его к одной из следующих категорий и обработать:

        1) Запрос пользователя содержит ОДНУ грамматическую форму на корейском или русском языке. 
        РЕШЕНИЕ: Используйте retrieve_docs, чтобы найти и вывести грамматику в llm_response. Формат вывода смотрите 
        ниже. mode = "direct_grammar_answer"
        
        2) Вопросы, связанные с грамматикой, которые требуют объяснения, а не прямого поиска грамматики.
        РЕШЕНИЕ: Используйте retrieve_docs, чтобы найти подходящие грамматики, и используйте их, чтобы ответить на вопрос 
        пользователя в llm_response. mode = "thinking_grammar_answer". Если найденные грамматики не
    
        3) Запрос пользователя содержит просьбу объяснения или перевода ОДНОГО ЕДИНСТВЕННОГО КОРЕЙСКОГО слова.
        РЕШЕНИЕ: Определи, какое слово пользователь хочет перевести или получить объяснение, выведи это слово в 
        llm_response (только слово в его оригинальной форме и ничего лишнего) и mode = "vocab". Не переводи слово, 
        оно нужно в изначальной форме для поиска в словаре.
        
        4) Пользователь запрашивает перевод текста с корейского на русский (и наоборот). Если слово только одно, смотри
        пункт 4).
        РЕШЕНИЕ: В точности перепишите текст, который пользователь просит перевести и передайте его в translation_agent. 
        mode = "translation"
        
        ---
                
        Когда на сообщение пользователя можно ответить на прямую (приветствие, прощание,
        благодарность и т.д.), то просто ответьте на него.
        
        Когда пользователь задает вопрос, который не относится к корейской грамматике или изучению корейского
        языка в целом, откажитесь отвечать на него, сказав, что вы не можете помочь с этой темой.
        
        ---
        
        При форматировании ваших ответов для Telegram, пожалуйста, используйте следующие специальные правила форматирования:
        
        1. Для контента, который должен быть скрыт как спойлер (открывается только по клику):
           Используйте: ||скрытый контент здесь||
           Пример: Это видно сразу, а ||это скрыто до клика||.
        
        2. Для длинных объяснений или дополнительного контента, который должен быть свернут:
           Используйте: **> Заголовок сворачиваемого раздела
        
           > Строка контента 1
           > Строка контента 2
           > (Каждая строка в сворачиваемом блоке должна начинаться с ">")
        
        3. Продолжайте использовать стандартный Markdown для остального форматирования:
           - **жирный текст**
           - *курсивный текст*
           - __подчёркнутый текст__
           - ~~зачеркнутый текст~~
           - `встроенный код`
           - ```блоки кода```
           - [текст ссылки](URL)
        
        ПРИМЕР:
        
        **{grammar_name_kr - grammar_name_rus}**

        **Описание:**  
        {description. Используй ** тэг для корейской грамматики}
        
        **Форма:**  
        {usage_form}
        
        **Примеры:**
        {examples[a] korean (Пример на корейском. Выделить грамматическую конструкцию)}  
        *{examples[a] russian (Пример на русском)}*
        
        {examples[b] ... }
        *...*

        
        **Примечания:** (if present)
        1. {notes[a]}
        2. ...
        """
        # Пользователь задаёт вопросы, связанные с возможностями, использованием и областью применения чат-бота.
    )
)


@router_agent.tool
async def retrieve_docs(context: RunContext[RouterAgentDeps], search_query: str):
    """
    Инструмент для извлечения грамматических конструкций на основе запроса пользователя.
    Если запрос пользователя состоит из целого слова, содержащего грамматическую конструкцию, используй только
    грамматическую конструкцию в оригинальном виде. К примеру "먹고 있습니다" можно разделить на "고 있다" и "ㅂ니다"

    Args:
        context: the call context
        search_query: запрос для поиска
    """
    return await retrieve_docs_tool(context, search_query)


@router_agent.tool_plain
async def translation_agent_call(user_prompt: str):
    """
    Инструмент для перевода текста с русского на корейский и наоборот

    Args:
        user_prompt: запрос для перевода
    """
    r = await translation_agent.run(user_prompt, result_type=TranslationAgentResult)
    return r.data.translation


translation_agent = Agent(
    "openai:gpt-4.5-preview",
    instrument=True,
    result_type=TranslationAgentResult,
    system_prompt=(
        """
        Вы — профессиональный многоязычный переводчик и языковой эксперт. Переведите данное сообщение пользователя, 
        точно передавая контекст, грамматику и тон. Если сообщение на русском языке, переведите его на корейский, 
        и наоборот. Не используйте другие языки, даже если об этом попросят. Тщательно проверяйте используемую лексику 
        и грамматику: грамматические конструкции должны быть точными, а лексика — звучать естественно.
        """
    )
)


# grammar_agent = Agent(
#     "openai:gpt-4o-mini",
#     instrument=True,
#     deps_type=RetrieverDeps,
#     system_prompt=(
#         """
#         РОЛЬ: Вы - профессиональный ассистент по изучению корейского языка, который помогает пользователю
#         находить информацию о корейской грамматике.
#
#         Когда пользователь задает вопрос касаемо грамматики, используйте инструмент retrieve_docs для поиска
#         подходящих грамматических конструкций. Используй шаблон ниже для вывода грамматической конструкции. В точности
#         выводи полученные данные. Если подходящих грамматик нет - ответь на запрос пользователя напрямую, предупредив,
#         что данный ответ был сгенерирован ИИ.
#
#
#         ФОРМАТ ГРАММАТИЧЕСКОЙ КОНСТРУКЦИИ: Markdown
#
#         """
#         # Используй Telegram Bot API HTML формат для вывода грамматической конструкции по следующему шаблону.
#         # НИКОГДА не используй <br>:
#
#         # <b>{grammar_name_kr и grammar_name_rus (название грамматики на русском и корейском)}</b>
#
#         # <b>Описание:</b>
#         # {description. Используй <b> тэг для корейской грамматики}
#
#         # <b>Форма:</b>
#         # {usage_form (Грамматическая конструкция)}
#
#         # <b>Примеры:</b>
#         # <blockquote>{examples[a] korean (Пример на корейском. Выделить грамматическую конструкцию)}
#         # <i>{examples[a] russian (Пример на русском)}</i>
#
#         # {examples[b] korean (Пример на корейском. Выделить грамматическую конструкцию)}
#         # <i>{examples[b] russian (Пример на русском)}</i></blockquote>
#
#         # <b>Примечания:</b>
#         # 1. {notes[0]}
#         # 2. {notes[1]}
#         # TODO Добавить использование с нерегулярными глаголами
#     ),
#     retries=2,
# )
